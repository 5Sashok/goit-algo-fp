class Node:
    def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:
    def __init__(self):
        self.head = None

    # Додавання елемента в кінець
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        last = self.head
        while last.next:
            last = last.next
        last.next = new_node

    # Вивід списку
    def print_list(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

    # 1. Реверсування списку
    def reverse(self):
        prev = None
        current = self.head
        while current:
            next_node = current.next
            current.next = prev
            prev = current
            current = next_node
        self.head = prev

    # 2. Сортування злиттям
    def merge_sort(self, head=None):
        if head is None:
            head = self.head

        # Базовий випадок
        if head is None or head.next is None:
            return head

        # Знаходимо середину
        middle = self.get_middle(head)
        next_to_middle = middle.next
        middle.next = None

        # Рекурсивно сортуємо дві половини
        left = self.merge_sort(head)
        right = self.merge_sort(next_to_middle)

        # Зливаємо відсортовані половини
        sorted_list = self.sorted_merge(left, right)
        if head == self.head:
            self.head = sorted_list
        return sorted_list

    # Допоміжна функція для пошуку середини
    def get_middle(self, head):
        if head is None:
            return head
        slow, fast = head, head
        while fast.next and fast.next.next:
            slow = slow.next
            fast = fast.next.next
        return slow

    # Допоміжна функція для злиття двох списків
    def sorted_merge(self, a, b):
        if a is None:
            return b
        if b is None:
            return a
        if a.data <= b.data:
            result = a
            result.next = self.sorted_merge(a.next, b)
        else:
            result = b
            result.next = self.sorted_merge(a, b.next)
        return result

    # 3. Об’єднання двох відсортованих списків
    @staticmethod
    def merge_two_sorted_lists(list1, list2):
        dummy = Node(0)
        tail = dummy

        a = list1.head
        b = list2.head

        while a and b:
            if a.data <= b.data:
                tail.next = a
                a = a.next
            else:
                tail.next = b
                b = b.next
            tail = tail.next

        if a:
            tail.next = a
        if b:
            tail.next = b

        result_list = LinkedList()
        result_list.head = dummy.next
        return result_list


# ---------------- Тест ----------------
l1 = LinkedList()
for i in [3, 1, 4, 2]:
    l1.append(i)

print("Початковий список:")
l1.print_list()

# Реверс
l1.reverse()
print("Після реверсу:")
l1.print_list()

# Сортування
l1.merge_sort()
print("Після сортування:")
l1.print_list()

# Об'єднання двох списків
l2 = LinkedList()
for i in [0, 5, 6]:
    l2.append(i)

merged = LinkedList.merge_two_sorted_lists(l1, l2)
print("Об'єднаний відсортований список:")
merged.print_list()
